@model TaskData

@{
    Layout = "_Layout";
}

@* <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head> *@
<body style="background-color:#F4F7FA">
    <style>
        .card:hover {
            transform: scale(1.05); 
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); 
        }

        .card {
            border-radius: 15px; 
            overflow: hidden;
        }


        .popup {
            display: none; 
            position: fixed; 
            z-index: 1; 
            top: 0;
            width: 80%; 
            height: 100%; 
            background-color: rgba(0, 0, 0, 0.5); 
        }

        .popup-content {
            background-color: white; 
            color: #901F17;
            margin: 15% auto; 
            padding: 20px;
            border: 1px solid black;
            box-shadow: 5px 10px #901F17;
            width: 50%;
            font-size: 14px;
            font-weight : bold;
            text-align: center;
            border-radius: 10px;
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 34px;
            height: 20px;
        }

            .switch input {
                opacity: 0;
                width: 0;
                height: 0;
            }

       .switch {
    position: relative;
    display: inline-block;
    width: 34px;
    height: 20px;
}

.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 20px;
}

.slider:before {
    position: absolute;
    content: "";
    height: 14px;
    width: 14px;
    left: 3px;
    bottom: 3px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

input:checked + .slider {
            background-color: #901F17;
}

input:checked + .slider:before {
    transform: translateX(14px);
}


        .popup-button {
            background-color: #901F17;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 5px;
            margin: 10px;
        }

            .popup-button:hover {
                background-color: #d9534f;
            }

    </style>
    <form id="dataForm">
        <div class="mb-2">

            <div class="container">

                <h4 class="text-left p-3" style="font-size:32px;padding-left:0px !important">My Tasks</h4>
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">

                    @foreach (var item in Model.TaskList)
                    {
                        <div class="col-sm-12 col-md-4">
                            <input type="hidden" name="Id" id="Id" value="@item.Id" />
                            <div class="card" style="border: 1px solid #CCC; border-radius: 15px; transition: transform 0.3s ease;">
                                <div class="card-header py-3 d-flex align-items-center justify-content-between" style="background-color: #901F17; color: #000000; border-top-left-radius: 15px; border-top-right-radius: 15px; cursor: pointer;">
                                    <h5 class="d-flex align-items-center" style="font-size: 18px; font-weight: bold; color: #ffff; margin: 0;">
                                        <input type="hidden" name="Title" id="Title" value="@item.Title" />
                                        @item.Title
                                    </h5>

                                </div>
                                <div class="card-body py-3 border-bottom d-flex justify-content-between">
                                    <div class="d-flex flex-column">
                                        <p class="d-block mb-1">
                                            <input type="hidden" name="description" id="description" value="@item.Description" />
                                            <i class="fa fa-sticky-note"></i> <b>Description:</b> @item.Description
                                        </p>

                                        <p class="d-block mb-1">
                                            <input type="hidden" name="Foreman_Name" id="Foreman_Name" value="@item.Foreman_Name" />
                                            <i class="fa fa-user-circle"></i> <b>Foreman Name:</b> @item.Foreman_Name
                                        </p>

                                        <p class="d-block mb-1">
                                            <input type="hidden" name="Status" id="Status" value="@item.Status" />

                                            @if (item.Status)
                                            {
                                                <i class="fa fa-check-square"></i>
                                            }
                                            else
                                            {
                                                <i class="fa fa-times-circle"></i>
                                            }

                                            <b>Status:</b>

                                            <label class="switch">
                                                <input type="checkbox" id="toggleStatus" disabled @(item.Status ? "checked" : "") onchange="toggleStatus(this)">
                                                <span class="slider round"></span>
                                            </label>
                                        </p>


                                        <p class="d-block mb-1">
                                            <input type="hidden" name="Task_Date" id="Task_Date" value="@item.Task_Date" />
                                            <i class="fa fa-calendar"></i> <b>Task Date:</b>  @item.Task_Date
                                        </p>

                                    </div>
                                </div>
                                <div class="card-footer p-2 text-center">
                                    @if(item.Status)
                                    {
                                        <button type="button" name="Completetask" id="completeTask" class="btn" style="background-color:#901F17; color:#fff ;align-items:center; border-radius: 25px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);" disabled onclick="UpdateTask()">Completed</button>
                                    }
                                    else
                                    {
                                        <button type="button" name="Completetask" id="completeTask" class="btn" style="background-color:#901F17; color:#fff ;align-items:center; border-radius: 25px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);" onclick="UpdateTask()">Complete Task</button>
                                    }

                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </form>

    <div id="confirmation-popup" class="popup">
        <div class="popup-content">
            <span id="confirmation-message"></span><br /><br />
            <button id="confirmation-yes" class="popup-button">Yes</button>
            <button id="confirmation-no" class="popup-button">No</button>
        </div>
    </div>

    <div id="result-popup" class="popup">
        <div class="popup-content">
            <span id="result-message"></span><br /><br />
            <button id="result-ok" class="popup-button">OK</button>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>

        function toggleStatus(element) {
            let statusValue = element.checked; // Boolean value (true/false)

            console.log("Status changed:", statusValue);

            // Optionally, send an AJAX request to update the backend
        }

        function showConfirmationPopup(message, onYes, onNo) {
            const popup = document.getElementById('confirmation-popup');
            const popupMessage = document.getElementById('confirmation-message');
            const popupYes = document.getElementById('confirmation-yes');
            const popupNo = document.getElementById('confirmation-no');

            popupMessage.textContent = message;
            popup.style.display = 'block';

            popupYes.onclick = function () {
                popup.style.display = 'none';
                if (onYes) onYes();
            };

            popupNo.onclick = function () {
                popup.style.display = 'none';
                if (onNo) onNo();
            };
        }

        function showResultPopup(message) {
            const popup = document.getElementById('result-popup');
            const popupMessage = document.getElementById('result-message');
            const popupOk = document.getElementById('result-ok');

            popupMessage.textContent = message;
            popup.style.display = 'block';

            popupOk.onclick = function () {
                popup.style.display = 'none';
            };
        }
        document.getElementById('completeTask').onclick = function () {
            showConfirmationPopup('Are you sure you  want to mark the task as complete?', function () {
                const form = document.getElementById('dataForm');
                const formData = new FormData(form);
                const data = {};
                formData.forEach((value, key) => {
                    let keys = key.split(/[\[\]\.]/).filter(Boolean);
                    if (keys.length === 3) {
                        let [arrayName, index, field] = keys;
                        if (!data[arrayName]) {
                            data[arrayName] = [];
                        }
                        if (!data[arrayName][index]) {
                            data[arrayName][index] = {};
                        }
                        data[arrayName][index][field] = value;
                    } else {
                        data[key] = value;
                    }
                });

                const saveButton = document.getElementById('completeTask');
                saveButton.disabled = true;
                saveButton.textContent = 'Updating...';
                console.log(data);
                const checkboxes = form.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach((checkbox) => { data[checkbox.name] = checkbox.checked });
                fetch('/Home/UpdateTask', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            saveButton.textContent = 'Completed';
                            saveButton.disabled = true;
                            showResultPopup('Task updated successfully.');
                            document.getElementById("toggleStatus").checked = true;
                        } else {
                            saveButton.textContent = 'Complete Task';
                            saveButton.disabled = false;
                            showResultPopup(result.message || 'Failed to update the task.');
                            //document.getElementById("toggleStatus").checked = false;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }, function () {
                showResultPopup('Task update cancelled.');
            });
        };
    </script>
</body>
@* </body>
</html>  *@

